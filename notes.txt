var s="audacity";
s=s[1].toUpperCase()+s,slice(2);

$("#main").append(name); and also prepend

s=s.replace("city",town);
s.slice(2)

.slice() is another string method, which acts on the string s in this case. .slice(start, [end]) will grab the part of the string from the index of start to the index of end. The fact that [end] shows up in brackets means that it's optional. If it isn't there, then .slice() will select all of the string from start to the very end of the string. s.slice(2) gives us "dacity".

Concatenated together, we get "Udacity"!
------------
Check out this comparison of True and False in JavaScript and Python

There are only six falsy values in JavaScript so it is easiest to memorize those:

false
0 (zero)
"" (empty string)
null
undefined
NaN
You can learn more about some of the quirks of truthy and falsy here.

What is NaN? NaN, or Not a Number, is a value that turns up when we ask Javascript to do certain impossible things in arithmetic -- like divide zero by zero.

Try it in the console -- and see if you can find the other two special numeric values, Infinity and -Infinity.

One last note: at 1:25, Cameron mentions that undefined means "that a variable doesn't exist and the interpreter doesn't know what you're referring to." This isn't quite true. If you try to use a var that hasn't been defined, you get a ReferenceError. You will see undefined if you declare a variable but don't assign it any values. Like so:

var a;
a;
will result in undefined. But

b;
will result in a ReferenceError because b hasn't been declared yet.
--------------
true= true, non-zero numbers, "String",objects,arrays,functions;
false=false,0,"",undefined,null,NaN;
----------
What the heck is all that green text???

["Euler", 3.14159, {name: "James", job: "Course Developer"}, myFunc]
It's an example array that demonstrates how you can make a valid array that mixes JavaScript data types.

"Euler" is a string. 3.14159 is a number. {name: "James", job: "Course Developer"} is an object (you'll be learning about those soon). And myFunc is a function (more on functions in the next lesson)!
-------------------------
var last=_array.pop();
    Array.prototype.push.apply(newArray, _array);
    newArray.push(last+1);
    ------------
    There are a few ways of solving this problem. Here's the code I wrote. Let's break it down.

function incrementLastArrayElement(_array)  {
    var newArray = [];
    newArray = _array.slice(0);
    var lastNumber = newArray.pop();
    newArray.push(lastNumber + 1);
    return newArray;
}
newArray = _array.slice(0);

Just like string.slice(begin, [end]) separates the characters of a string, array.slice(begin, [end]) separates the elements of an array from the index of the begin up to but not including end. We want to make a copy of the original array, so we won't include an [end]. At this point, newArray is a copy of the original _array.

var lastNumber = newArray.pop();

The array.pop() method conveniently gives us (or returns) the last element of the array, which in this case is the number we want to increase by 1. However! Be careful because array.pop() actually removes the last element of the array. This is why we made a copy in the previous line, so we wouldn't modify the original _array.

newArray.push(lastNumber + 1);

Just how the jQuery .append() method adds an element to the end of an HTML block, the array.push() method adds an element to the end of an array. Here, we're .pushing()ing the lastNumber + 1, which is exactly what we wanted to do.

And with that, we've got our newly incremented array!
--------------------
var space=finalName.indexOf(" ");
    finalName=finalName.toUpperCase();
    var sliced=finalName.slice(space);
    finalName=finalName[0]+finalName.slice(1,space).toLowerCase()+sliced;
-------------
Like always, there are many ways of solving this problem. Here's what I came up with:

function nameChanger(oldName) {
    var finalName = oldName;
    var names = oldName.split(" ");
    names[1] = names[1].toUpperCase();
    names[0] = names[0].slice(0,1).toUpperCase() + names[0].slice(1).toLowerCase();
    finalName = names.join(" ");
    return finalName;
}
var names = oldName.split(" ")

Here, we're creating an array of names by breaking the original name at the space. At this point for our original example, names === ["AlbERt", "EINstEiN"]

names[1] = names[1].toUpperCase();

The string.toUpperCase() method does exactly what its name describes. It's acting on names[1], which is "EINstEiN" in the original example. So here, we're reassigning the second element in the names array to the all caps version of "EINSTEIN".

names[0] = names[0].slice(0,1).toUpperCase() + names[0].slice(1).toLowerCase();

This line builds Albert. names[0].slice(0,1).toUpperCase() starts by acting on the first element in the names array, which is "AlbERt" in the example. Then, we grab just the first letter by using .slice(0,1). Then we simply use the .toUpperCase() method again to make sure the first letter is capitalized. Also, notice how we chained two methods together here.

The next part, names[0].slice(1).toLowerCase() acts similarly, except this time we're using .slice(1) to grab the rest of the first string, which is "lbERt" in the example. Then we simply chain the .toLowerCase() method to make sure that the rest of the letters in the first name are lower case. Once we have the first letter capitalized and the rest of the name lower case, we concatenate them together with the +.

finalName = names.join(" ");

array.join([chars]) lets us put array elements together into a single string. Each element will be separated by the optional chars. In this case, we want a space between the two names, so we made the chars a single space, " ". With that, we've joined "Albert" and "Einstein" to form "Albert EINSTEIN"!
---------------------------